# -*- coding: utf-8 -*-
"""Custom_MCP_Tools_Integration_With_FastMCP_Marktechpost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zAm-fPkvAGrBN7JaBETSaE_vHk-wYmQG
"""

from getpass import getpass
import os

api_key = getpass("Enter your GEMINI_API_KEY: ")
os.environ["GEMINI_API_KEY"] = api_key

!pip install -q google-genai mcp fastmcp httpx nest_asyncio

import nest_asyncio
nest_asyncio.apply()

from fastmcp import FastMCP
import httpx

mcp_server = FastMCP("weather")

@mcp_server.tool()
def get_weather(latitude: float, longitude: float) -> str:
    """3â€‘day min/max temperature forecast via Openâ€‘Meteo."""
    url = (
        f"https://api.open-meteo.com/v1/forecast"
        f"?latitude={latitude}&longitude={longitude}"
        "&daily=temperature_2m_min,temperature_2m_max&timezone=UTC"
    )
    resp = httpx.get(url, timeout=10)
    daily = resp.json()["daily"]
    return "\n".join(
        f"{date}: low {mn}Â°C, high {mx}Â°C"
        for date, mn, mx in zip(
            daily["time"],
            daily["temperature_2m_min"],
            daily["temperature_2m_max"],
        )
    )

@mcp_server.tool()
def get_alerts(state: str) -> str:
    """Dummy USâ€‘state alerts."""
    return f"No active weather alerts for {state.upper()}."

import asyncio
from google import genai
from google.genai import types
from fastmcp import Client as MCPClient
from fastmcp.client.transports import FastMCPTransport

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))
MODEL = "gemini-2.0-flash"
transport = FastMCPTransport(mcp_server)

function_declarations = [
    {
        "name": "get_weather",
        "description": "Return a 3â€‘day min/max temperature forecast for given coordinates.",
        "parameters": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number",
                    "description": "Latitude of target location."
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude of target location."
                }
            },
            "required": ["latitude", "longitude"]
        }
    },
    {
        "name": "get_alerts",
        "description": "Return any active weather alerts for a given U.S. state.",
        "parameters": {
            "type": "object",
            "properties": {
                "state": {
                    "type": "string",
                    "description": "Twoâ€‘letter U.S. state code, e.g. 'CA'."
                }
            },
            "required": ["state"]
        }
    }
]

tool_defs = types.Tool(function_declarations=function_declarations)

async def run_gemini(lat: float, lon: float):
    async with MCPClient(transport) as mcp_client:
        prompt = f"Give me a 3â€‘day weather forecast for latitude={lat}, longitude={lon}."
        response = client.models.generate_content(
            model=MODEL,
            contents=[prompt],
            config=types.GenerateContentConfig(
                temperature=0,
                tools=[tool_defs]
            )
        )

        call = response.candidates[0].content.parts[0].function_call
        if not call:
            print("No function call; GPT said:", response.text)
            return

        print("ðŸ”§ Gemini wants:", call.name, call.args)

        result = await mcp_client.call_tool(call.name, call.args)
        print("\nðŸ“‹ Tool result:\n", result)

asyncio.get_event_loop().run_until_complete(run_gemini(37.7749, -122.4194))